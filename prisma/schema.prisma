generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                  Int                 @id @default(autoincrement())
  nome                String
  email               String              @unique
  senha               String
  telefone            String?
  endereco            String?
  criadoEm            DateTime            @default(now())

  produtos            Produto[]
  pedidos             Pedido[]
  carrinho            CartItem[]
  favoritos           Favorito[]
  avaliacoesProdutos  MinhasAvaliacoes[]
  avaliacoesRecebidas RecebidaAvaliacao[] @relation(name: "AvaliacaoRecebida")
  avaliacoesFeitas    RecebidaAvaliacao[] @relation(name: "AvaliacaoFeita")
}

enum CondicaoProduto {
  NOVO
  SEMI_NOVO
}

model Produto {
  id         Int             @id @default(autoincrement())
  nome       String
  condicao   CondicaoProduto
  descricao  String
  preco      Decimal
  quantidade Int
  imagem     String?
  categoria  String
  criadoEm   DateTime        @default(now())

  vendedor   Usuario   @relation(fields: [vendedorId], references: [id])
  vendedorId Int

  pedidos    OrderItem[]
  carrinhos  CartItem[]
  favoritos  Favorito[]
  avaliacoes MinhasAvaliacoes[]
}

model Pedido {
  id         Int       @id @default(autoincrement())
  usuario    Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId  Int
  status     String    @default("Pendente")
  criadoEm   DateTime  @default(now())

  itens      OrderItem[]
  pagamento  Pagamento?
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  quantidade Int
  preco     Decimal
  produto    Produto  @relation(fields: [produtoId], references: [id])
  produtoId  Int
  pedido     Pedido   @relation(fields: [pedidoId], references: [id])
  pedidoId   Int
}

enum OrderStatus {
  PENDENTE
  PROCESSANDO
  ENVIADO
  ENTREGUE
  CANCELADO
}

model CartItem {
  id         Int       @id @default(autoincrement())
  quantidade Int
  produto    Produto   @relation(fields: [produtoId], references: [id])
  produtoId  Int
  usuario    Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId  Int
}

model Favorito {
  id         Int       @id @default(autoincrement())
  usuario    Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId  Int
  produto    Produto   @relation(fields: [produtoId], references: [id])
  produtoId  Int
}

model MinhasAvaliacoes {
  id         Int       @id @default(autoincrement())
  usuario    Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId  Int
  produto    Produto   @relation(fields: [produtoId], references: [id])
  produtoId  Int
  nota       Int
  comentario String?
  criadoEm   DateTime  @default(now())
}

model RecebidaAvaliacao {
  id          Int       @id @default(autoincrement())
  usuario     Usuario   @relation(name: "AvaliacaoRecebida", fields: [usuarioId], references: [id])
  usuarioId   Int
  avaliador   Usuario   @relation(name: "AvaliacaoFeita", fields: [avaliadorId], references: [id])
  avaliadorId Int
  nota        Int
  comentario  String?
  criadoEm    DateTime  @default(now())
}

model Pagamento {
  id         Int       @id @default(autoincrement())
  pedido     Pedido    @relation(fields: [pedidoId], references: [id])
  pedidoId   Int       @unique
  metodo     String
  status     String    @default("Pendente")
  criadoEm   DateTime  @default(now())
  atualizado DateTime  @default(now()) @updatedAt
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  CONCLUIDO
  FALHOU
  REEMBOLSADO
}